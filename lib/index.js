// Generated by CoffeeScript 1.6.2
(function() {
  var NoJam, amdify, async, at, outcome, resolve, step, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  step = require("step");

  amdify = require("amdify");

  at = amdify.transformers;

  async = require("async");

  outcome = require("outcome");

  resolve = require("resolve");

  _ = require("underscore");

  NoJam = (function() {
    /*
    */
    function NoJam(options) {
      this.options = options;
      this._copyBundle = __bind(this._copyBundle, this);
    }

    /*
    */


    NoJam.prototype.rebuild = function(next) {
      var o, self;

      if (next == null) {
        next = function() {};
      }
      this._parseConfig();
      o = outcome.e(next);
      self = this;
      return step((function() {
        return self._scanDeps(this);
      }), o.s(function(bundles) {
        return self._copyBundles(bundles, next);
      }), next);
    };

    /*
    */


    NoJam.prototype._scanDeps = function(next) {
      console.log("scanning dependencies: %s", this._dependencies.map(function(ops) {
        return ops.name;
      }).join(", "));
      return async.map(this._dependencies, (function(info, next) {
        return amdify({
          entry: info.path
        }, outcome.e(next).s(function(bundle) {
          bundle.name = info.name;
          return next(null, bundle);
        }));
      }), next);
    };

    /*
    */


    NoJam.prototype._copyBundles = function(bundles, next) {
      console.log("transforming dependencies into %s", this._pkgDir);
      return async.eachSeries(bundles, this._copyBundle, next);
    };

    /*
    */


    NoJam.prototype._copyBundle = function(bundle, next) {
      var pluckDeps, transformer;

      transformer = new at.Template("amd");
      transformer = new at.Copy({
        output: this._cwd + "/" + this._pkgDir
      }, transformer);
      pluckDeps = this._depNames.filter(function(depName) {
        return depName !== bundle.name;
      });
      console.log("install %s", bundle.name);
      bundle._deps = bundle._deps.filter(function(dep) {
        return !~pluckDeps.indexOf(dep.moduleName);
      });
      return bundle.transform(transformer, next);
    };

    /*
    */


    NoJam.prototype._parseConfig = function() {
      var cwd, deps, ignore, pkg, pkgDir, _ref, _ref1, _ref2, _ref3, _ref4;

      pkg = this.options.pkg;
      cwd = this._cwd = this.options.cwd;
      deps = this._depNames = (_ref = (_ref1 = pkg.nojam) != null ? _ref1.dependencies : void 0) != null ? _ref : Object.keys(pkg.dependencies);
      ignore = ((_ref2 = pkg.nojam) != null ? _ref2.ignore : void 0) || [];
      deps = deps.filter(function(dep) {
        return !~ignore.indexOf(dep);
      });
      pkgDir = this._pkgDir = (_ref3 = (_ref4 = pkg.jam) != null ? _ref4.packageDir : void 0) != null ? _ref3 : pkg.nojam.packageDir;
      if (!pkgDir) {
        throw new Error("package dir must exist");
      }
      return this._dependencies = deps.map(function(name) {
        return {
          path: resolve.sync(name, {
            basedir: cwd
          }),
          name: name
        };
      });
    };

    return NoJam;

  })();

  module.exports = NoJam;

}).call(this);
