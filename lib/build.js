// Generated by CoffeeScript 1.4.0
(function() {
  var amdify, async, at, dref, fs, outcome, path, stepc;

  amdify = require("amdify");

  at = amdify.transformers;

  async = require("async");

  stepc = require("stepc");

  outcome = require("outcome");

  fs = require("fs");

  path = require("path");

  dref = require("dref");

  module.exports = (function() {
    /*
    */

    function _Class(ops, packageManagers) {
      this._jam = packageManagers.packageManagers.jam;
      this._directory = process.cwd();
      this._output = this._directory + "/" + (dref.get(ops.pkg, "jam.public.vendor") || "jam");
      console.log(this._output);
    }

    /*
    */


    _Class.prototype.run = function(callback) {
      var dir, o, output, self;
      o = outcome.e(callback);
      dir = this._directory + "/node_modules";
      output = this._output;
      self = this;
      return stepc.async((function() {
        return fs.readdir(dir, this);
      }), o.s(function(dirs) {
        dirs = dirs.map(function(d) {
          return dir + "/" + d;
        }).filter(function(d) {
          return path.basename(d).substr(0, 1) !== "." && fs.lstatSync(d).isDirectory();
        });
        return this(null, dirs);
      }), o.s(function(dirs) {
        return self._amdifyAll(dirs, this);
      }), o.s(function() {
        return self._jam.rebuild(this);
      }), callback);
    };

    /*
    */


    _Class.prototype._amdifyAll = function(dirs, callback) {
      var _this = this;
      return async.map(dirs, (function(dir, callback) {
        return _this._amdify(dir, function(err) {
          return callback();
        });
      }), callback);
    };

    /*
    */


    _Class.prototype._amdify = function(dir, callback) {
      var _this = this;
      return amdify({
        entry: require.resolve(dir),
        directory: this._output
      }, outcome.e(callback).s(function(bundle) {
        var transformer;
        transformer = new at.Template("amd");
        transformer = new at.Copy({
          output: _this._output
        }, transformer);
        return bundle.transform(transformer, callback);
      }));
    };

    return _Class;

  })();

}).call(this);
